{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","views/ContactsView/ContactsView.module.css","components/Modal/Modal.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/Modal/Modal.js","views/ContactsView/ContactsView.js"],"names":["module","exports","fetchContacts","dispatch","fetchContactsRequest","axios","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","response","status","toast","info","addContact","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getContacts","state","contacts","items","getLoading","isLoading","getError","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactList","useDispatch","visibleContacts","useSelector","contactsSelectors","length","List","className","s","list","map","id","ListItem","ListItemAvatar","Avatar","aria-label","ListItemText","primary","color","ListItemSecondaryAction","IconButton","onClick","contactsOperations","edge","Typography","variant","ContactForm","onClose","useState","setName","setNumber","handleChange","e","target","value","resetInput","form","onSubmit","preventDefault","find","checkRepeatName","checkRepeatNumber","trim","checkEmptyQuery","TextField","label","type","fullWidth","onChange","textField","Button","size","Filter","contactsActions","filterContact","modalRoot","document","querySelector","Modal","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","Modal__backdrop","event","currentTarget","Modal__content","ContactsView","showModal","setShowModal","toggleModal","Container","wrapper","maxWidth","title","add"],"mappings":"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","file":"static/js/contacts-view.25fdbbee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"textField\":\"ContactForm_textField__3CVaX\",\"input\":\"ContactForm_input__gm87B\",\"btn\":\"ContactForm_btn__2Bpnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactsView_wrapper__CCOvq\",\"title\":\"ContactsView_title__zBwOW\",\"add\":\"ContactsView_add__2jKST\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal__backdrop\":\"Modal_Modal__backdrop__2cPIs\",\"Modal__content\":\"Modal_Modal__content__9ZV8o\"};","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\nimport { toast } from 'react-toastify';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => {\n      dispatch(fetchContactsError(error));\n\n      if (error.response.status === 404) {\n        toast.info(\"There is no such user's collection!\");\n      } else if (error.response.status === 500) {\n        toast.error('Oops! Server error! Please try later!');\n      } else {\n        toast.error('Something went wrong! Please reload the page!');\n      }\n    });\n};\n\nexport const addContact = (name, number) => dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => {\n      dispatch(addContactError(error));\n\n      if (error.response.status === 400) {\n        toast.error('Contact creation error!');\n      } else {\n        toast.error('Something went wrong! Please reload the page!');\n      }\n    });\n};\n\nexport const deleteContact = contactId => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch(error => {\n      dispatch(deleteContactError(error));\n\n      if (error.response.status === 404) {\n        toast.info(\"There is no such user's collection!\");\n      } else if (error.response.status === 500) {\n        toast.error('Oops! Server error! Please try later!');\n      } else {\n        toast.error('Something went wrong! Please reload the page!');\n      }\n    });\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\n\nimport s from './ContactList.module.css';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nfunction ContactList() {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(contactsSelectors.getVisibleContacts);\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <List className={s.list}>\n          {visibleContacts.map(({ name, number, id }) => (\n            <ListItem key={id}>\n              <ListItemAvatar>\n                <Avatar>\n                  <AccountCircleIcon aria-label=\"person\" />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={name} />\n              <ListItemText color=\"primary\" primary={number} />\n              <ListItemSecondaryAction>\n                <IconButton\n                  id={id}\n                  onClick={() => dispatch(contactsOperations.deleteContact(id))}\n                  edge=\"end\"\n                  aria-label=\"delete\"\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      )}\n      {contacts.length === 0 && (\n        <Typography color=\"primary\" variant=\"h5\">\n          There are no contacts in the phone book now\n        </Typography>\n      )}\n    </>\n  );\n}\n\nexport default ContactList;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport { toast } from 'react-toastify';\nimport NumberFormat from 'react-number-format';\nimport Button from '@material-ui/core/Button';\nimport LoaderComponent from '../LoaderComponent';\nimport s from './ContactForm.module.css';\nimport TextField from '@material-ui/core/TextField';\nfunction ContactForm({ onClose }) {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const isLoading = useSelector(contactsSelectors.getLoading);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const checkRepeatName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const checkRepeatNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const checkEmptyQuery = (name, number) => {\n    return name.trim() === '' || number.trim() === '';\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkRepeatName(name)) {\n      return toast(`${name} is already in the phonebook.`);\n    } else if (checkRepeatNumber(number)) {\n      return toast(`🤔 ${number} is already in the phonebook.`);\n    } else if (checkEmptyQuery(name, number)) {\n      return toast.info(\"Enter the contact's\");\n    } else {\n      dispatch(contactsOperations.addContact(name, number));\n    }\n    resetInput();\n  };\n\n  const resetInput = () => {\n    setName('');\n    setNumber('');\n    onClose();\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <TextField\n        label=\"Name\"\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"text\"\n        name=\"name\"\n        fullWidth\n        value={name}\n        onChange={handleChange}\n        className={s.textField}\n      />\n      <TextField\n        label=\"Number\"\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"phone\"\n        name=\"number\"\n        fullWidth\n        value={number}\n        onChange={handleChange}\n        className={s.textField}\n      />\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        fullWidth\n        type=\"submit\"\n      >\n        Add contact\n      </Button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\n\nimport TextField from '@material-ui/core/TextField';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <TextField\n          label=\"Filter\"\n          variant=\"outlined\"\n          type=\"text\"\n          value={filter}\n          fullWidth\n          color=\"primary\"\n          onChange={e =>\n            dispatch(contactsActions.filterContact(e.target.value))\n          }\n        />\n      )}\n    </>\n  );\n}\n\nexport default Filter;\n","import { createPortal } from 'react-dom';\nimport s from './Modal.module.css';\nimport React, { useEffect } from 'react';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onClose, children }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  const handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div className={s.Modal__backdrop} onClick={handleBackdropClick}>\n      <div className={s.Modal__content}>{children}</div>\n    </div>,\n    modalRoot,\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactList from '../../components/ContactList';\nimport ContactForm from '../../components/ContactForm';\nimport Typography from '@material-ui/core/Typography';\nimport Filter from '../../components/Filter';\nimport { contactsOperations } from '../../redux/contacts';\nimport s from './ContactsView.module.css';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport Modal from '../../components/Modal/Modal';\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  const [showModal, setShowModal] = useState(false);\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n  return (\n    <Container className={s.wrapper} maxWidth=\"xs\">\n      <Typography className={s.title} color=\"primary\" variant=\"h3\">\n        Contacts\n      </Typography>\n      <Filter />\n      <ContactList />\n      <IconButton\n        onClick={toggleModal}\n        className={s.add}\n        color=\"primary\"\n        aria-label=\"add contact\"\n      >\n        <AddIcon />\n      </IconButton>\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <ContactForm onClose={toggleModal} />\n        </Modal>\n      )}\n    </Container>\n  );\n}\n"],"sourceRoot":""}